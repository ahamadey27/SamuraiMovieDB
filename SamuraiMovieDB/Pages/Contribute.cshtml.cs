using Microsoft.AspNetCore.Authorization; // <-- ADDED
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using SamuraiMovieDB.Data;
using SamuraiMovieDB.Models;
using System.Threading.Tasks;

namespace SamuraiMovieDB.Pages
{
    [Authorize] // <-- ADDED
    public class ContributeModel : PageModel
    {
        private readonly ApplicationDbContext _context;

        public ContributeModel(ApplicationDbContext context)
        {
            _context = context;
        }

        // BindProperty connects this property to the form fields
        [BindProperty]
        public Movie Movie { get; set; } = default!; // Initialize to prevent null warnings

        // OnGet is called when the page is initially requested
        public IActionResult OnGet()
        {
            // Just return the page, the form will be empty
            return Page();
        }

        // OnPostAsync is called when the form is submitted (HTTP POST)
        public async Task<IActionResult> OnPostAsync()
        {
            // Remove Id from model state validation as it's generated by the DB
            ModelState.Remove("Movie.Id");

            // Check if the submitted data passes the validation rules in the Movie model
            if (!ModelState.IsValid)
            {
                // If validation fails, return the page with the current (invalid) data
                // Validation messages will be displayed next to the form fields
                return Page();
            }

            // Add the new movie object to the DbContext
            _context.Movies.Add(Movie);
            // Save the changes to the database
            await _context.SaveChangesAsync();

            // Redirect to the Index page after successfully adding the movie
            return RedirectToPage("./Index");
        }
    }
}
